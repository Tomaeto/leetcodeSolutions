/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //102. Binary Tree Level Order Traversal

    //Returns level order traveral of the given tree, left to right
    //Uses a breadth-first search to traverse tree and store values
    vector<vector<int>> levelOrder(TreeNode* root) {
        //2D vector for storing each level's traversal order
        vector<vector<int>> output;
        //If root is null, return empty vector
        if (root == NULL) return output;
        //Vector for storing current level's traversal
        vector<int> level;

        //Integer for storing the number of nodes within a level of the tree
        int count;

        //Queue for storing nodes within a level
        queue<TreeNode*> q;
        q.push(root);
        //While queue is not empty, breadth-first search a level of the tree and store traversal
        while(!q.empty()) {
            count = q.size();

            //For each node in level of tree, push value into level's array
            //If the node has subnodes, push onto queue
            //Then pop node from queue
            for (int i = 0; i < count; i++) {
                level.push_back(q.front()->val);
                if( q.front()->left) {
                    q.push(q.front()->left);
                }
                if (q.front()->right) {
                    q.push(q.front()->right);
                }
                q.pop();
            }
            //Push level's array onto 2D array and clear for next level
            output.push_back(level);
            level.clear();
        }

        //return 2D array
        return output;
    }
};